{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Mnist_CNN","provenance":[],"private_outputs":true,"collapsed_sections":[],"mount_file_id":"1ZWm6dequ4bKwb-YBdGamhOET6o4hYnzQ","authorship_tag":"ABX9TyPv5MdSmSIpXJbQNUZnkLHG"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"d8Sg5W0_XYJw","colab_type":"code","colab":{}},"source":["import torch\n","import torchvision # 다양한 이미지 데이터셋 제공  \n","import torchvision.transforms as transforms # 이미지를 다양한 형식으로 변환해줌 \n","\n","# 데이터로부터 함수를 예측하는 선형회귀 구현 데이터로 학습(xy,fx,fy) 해서 테스트로 x,y 값이 주어지면 fx ,fy 를 찾아라"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y9WwxGbgX9kJ","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OLxsGdZxYHuD","colab_type":"code","colab":{}},"source":["transform = transforms.Compose( # Compose는 한번에 여러 객체로 변환된 리스트를 제공 \n","    [transforms.ToTensor(), # 리스트로 반환한다.\n","     transforms.Normalize((0.5, 0.5, 0.5),(0.5,0.5,0.5))])\n","#-1 ~ 1사이의 값으로 normalized 시킴\n","# 이미지의 경우 픽셀값 하나는 0~255 값을 갖는다 하지만 ToTensor() 로 타입 변경시 0~1 사이 값으로 바뀜 \n","#-1 ~ 1사이의 값으로 normalized 시킴\n","print(transform)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1UZsjYdBYqnj","colab_type":"code","colab":{}},"source":["trainset = torchvision.datasets.CIFAR10(root ='./data',train=True,\n","                                          download = True, transform = transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size = 4, shuffle = True, num_workers = 2)\n","# num_workers 는 데이터 로딩을 위해 몇개의 서브 프로세를 사용할 것인지 결정한다. default = 0\n","testset = torchvision.datasets.CIFAR10(root = './data',train = False, download = True, transform = transform)\n","# 테스트 데이터셋을\n","testloader = torch.utils.data.DataLoader(testset, batch_size = 4, shuffle = False, num_workers = 2)\n","\n","classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'forg','horse','ship','truck')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8yi6LhsXcgQN","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import numpy as np    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_9i8yG2feJmY","colab_type":"code","colab":{}},"source":["def imshow(img):\n","  print('before unnormalize:',img)\n","  print(img.shape)\n","  img = img / 2+0.5 # unnormalize\n","  # torch.Size([3, 36, 138])\n","  npimg = img.numpy() #  넘파이 함수로 이미지를 reshape 하기 위해  npimg 변수 선언 \n","  plt.imshow(np.transpose(npimg,(1,2,0))) # 매트플롯 내장함수 사용 \n","  # 원래 1번(두번째) 인덱스 위치를 0번(첫번째) 위치로 옮김 \n","  print(np.transpose(npimg,(1,2,0)).shape)\n","  # trans pose 는 말 그대로 shpae 의 위치를 바꾼다  \n","  # transpos 를 하기 전에는 채널, 너비, 높이 순 이지만 매트플로세서는 너비, 높이, 채널 순\n","  # 이기 때문에 위치를 바꿔준다. \n","  # torch.Size([3, 36, 138]) 에서 이렇게 (36, 138, 3) 바뀐다. 너비 높이 채널\n","  plt.show()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zh1HnYduecYA","colab_type":"code","colab":{}},"source":["dataiter = iter(trainloader)\n","#첫번째 그룹 4개 이미지 데이터 획득\n","# trainloader 의 배치사이즈가 4이므로 4개\n","images, labels = dataiter.next()\n","# 첫번째 4개 이미지의 데이터 Shape 확인\n","print(images.shape)\n","# 4개의 이미지가 각각이 3개의 채널(가로세로, 색) 을 가지며 이미지의 크기가 32X32이다. "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h24FQifIegB3","colab_type":"code","colab":{}},"source":["print(torchvision.utils.make_grid(images).shape)\n","imshow(torchvision.utils.make_grid(images))\n","print(''.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V5G7bzBDhed3","colab_type":"code","colab":{}},"source":["import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"At1dmeFVhxAn","colab_type":"code","colab":{}},"source":["class Net(nn.Module):\n","  def __init__(self):\n","    super(Net, self).__init__()\n","    self.keep_prob = 0.5\n","    self.conv1 = nn.Conv2d(3,6,5)\n","    self.pool = nn.MaxPool2d(2,2)\n","    self.conv2 = nn.Conv2d(6,16,5)\n","    self.dropout = nn.Dropout(p=1 - self.keep_prob)# 오버피팅을 방지하기 위해 학습과정에서 신경망의 일부를 사용하지 않느다\n","    self.fc1 = nn.Linear(16 * 5 * 5, 120)\n","    self.fc2 = nn.Linear(120, 84)\n","    self.fc3 = nn.Sequential(\n","               nn.Linear(84,10)  , self.dropout )\n","  # ,nn.ReLU() 드롭아웃 후 \n","  def forward(self,x):\n","    x = self.pool(F.relu(self.conv1(x)))\n","    x = self.pool(F.relu(self.conv2(x)))\n","    x = x.view(-1,16*5*5)\n","    x = F.relu(self.fc1(x))\n","    x = F.relu(self.fc2(x))\n","    x = self.fc3(x)\n","    return x\n","net = Net()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q-MFtIp0i9Za","colab_type":"code","colab":{}},"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","# optim.SGD(net.parameters(), lr = 0.001, momentum = 0.9)\n","#[1,  2000] loss: 2.202\n","#[1,  4000] loss: 1.842\n","#[1,  6000] loss: 1.667\n","#[1,  8000] loss: 1.559\n","#[1, 10000] loss: 1.510\n","#[1, 12000] loss: 1.445\n","#[2,  2000] loss: 1.386\n","#[2,  4000] loss: 1.347\n","#[2,  6000] loss: 1.329\n","#[2,  8000] loss: 1.325\n","#[2, 10000] loss: 1.314\n","#[2, 12000] loss: 1.283\n","optimizer = optim.Adam(net.parameters(), lr = 0.00001)\n","\n","for epoch in range(2):\n","  running_loss = 0.0\n","  for i, data in enumerate(trainloader,0): # \n","    inputs, labels = data\n","    optimizer.zero_grad()\n","    outputs = net(inputs)\n","    loss = criterion(outputs, labels)# CrossEntropyLoss(i)\n","    loss.backward()\n","    optimizer.step()\n","    running_loss += loss.item()\n","    if i % 2000 == 1999:\n","      print('[%d, %5d] loss: %.3f' % (epoch +1,i+1, running_loss / 2000))\n","      running_loss = 0.0\n","print('Finish Training')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4yGaJsiAkaRu","colab_type":"code","colab":{}},"source":["imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' ' .join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":null,"outputs":[]}]}